// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: warns/service.proto

package warns

import (
	common "warns/pkg/models/common"
	users "warns/pkg/models/users"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Warns_Create_FullMethodName = "/warns.Warns/Create"
	Warns_Ban_FullMethodName    = "/warns.Warns/Ban"
	Warns_Unban_FullMethodName  = "/warns.Warns/Unban"
)

// WarnsClient is the client API for Warns service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarnsClient interface {
	// insert in table Warns
	Create(ctx context.Context, in *CreateIn, opts ...grpc.CallOption) (*CreateFailure, error)
	// update warns for this user IsActive=false, insert in table Bans, query to service users for update role -> banned
	Ban(ctx context.Context, in *users.Id, opts ...grpc.CallOption) (*BanFailure, error)
	// update ban for this user IsActive=false, query to service users for update role -> user
	Unban(ctx context.Context, in *users.Id, opts ...grpc.CallOption) (*common.Response, error)
}

type warnsClient struct {
	cc grpc.ClientConnInterface
}

func NewWarnsClient(cc grpc.ClientConnInterface) WarnsClient {
	return &warnsClient{cc}
}

func (c *warnsClient) Create(ctx context.Context, in *CreateIn, opts ...grpc.CallOption) (*CreateFailure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFailure)
	err := c.cc.Invoke(ctx, Warns_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warnsClient) Ban(ctx context.Context, in *users.Id, opts ...grpc.CallOption) (*BanFailure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BanFailure)
	err := c.cc.Invoke(ctx, Warns_Ban_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warnsClient) Unban(ctx context.Context, in *users.Id, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, Warns_Unban_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarnsServer is the server API for Warns service.
// All implementations must embed UnimplementedWarnsServer
// for forward compatibility.
type WarnsServer interface {
	// insert in table Warns
	Create(context.Context, *CreateIn) (*CreateFailure, error)
	// update warns for this user IsActive=false, insert in table Bans, query to service users for update role -> banned
	Ban(context.Context, *users.Id) (*BanFailure, error)
	// update ban for this user IsActive=false, query to service users for update role -> user
	Unban(context.Context, *users.Id) (*common.Response, error)
	mustEmbedUnimplementedWarnsServer()
}

// UnimplementedWarnsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWarnsServer struct{}

func (UnimplementedWarnsServer) Create(context.Context, *CreateIn) (*CreateFailure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWarnsServer) Ban(context.Context, *users.Id) (*BanFailure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ban not implemented")
}
func (UnimplementedWarnsServer) Unban(context.Context, *users.Id) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unban not implemented")
}
func (UnimplementedWarnsServer) mustEmbedUnimplementedWarnsServer() {}
func (UnimplementedWarnsServer) testEmbeddedByValue()               {}

// UnsafeWarnsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarnsServer will
// result in compilation errors.
type UnsafeWarnsServer interface {
	mustEmbedUnimplementedWarnsServer()
}

func RegisterWarnsServer(s grpc.ServiceRegistrar, srv WarnsServer) {
	// If the following call pancis, it indicates UnimplementedWarnsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Warns_ServiceDesc, srv)
}

func _Warns_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarnsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warns_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarnsServer).Create(ctx, req.(*CreateIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warns_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(users.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarnsServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warns_Ban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarnsServer).Ban(ctx, req.(*users.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warns_Unban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(users.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarnsServer).Unban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warns_Unban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarnsServer).Unban(ctx, req.(*users.Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Warns_ServiceDesc is the grpc.ServiceDesc for Warns service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Warns_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warns.Warns",
	HandlerType: (*WarnsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Warns_Create_Handler,
		},
		{
			MethodName: "Ban",
			Handler:    _Warns_Ban_Handler,
		},
		{
			MethodName: "Unban",
			Handler:    _Warns_Unban_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warns/service.proto",
}
