// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: warns/service.proto

package warns

import (
	common "warns/pkg/models/common"
	users "warns/pkg/models/users"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Warns_Warn_FullMethodName            = "/warns.Warns/Warn"
	Warns_UnWarn_FullMethodName          = "/warns.Warns/UnWarn"
	Warns_GetHistoryWarns_FullMethodName = "/warns.Warns/GetHistoryWarns"
	Warns_GetHistoryBan_FullMethodName   = "/warns.Warns/GetHistoryBan"
	Warns_Ban_FullMethodName             = "/warns.Warns/Ban"
	Warns_Unban_FullMethodName           = "/warns.Warns/Unban"
)

// WarnsClient is the client API for Warns service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarnsClient interface {
	// Insert active warn in table Warns
	Warn(ctx context.Context, in *WarnCreate, opts ...grpc.CallOption) (*WarnFailure, error)
	// Make all warns for this user inactive
	UnWarn(ctx context.Context, in *users.Id, opts ...grpc.CallOption) (*common.Response, error)
	// Get all warns (inactiv and activ) from Warns by user id
	GetHistoryWarns(ctx context.Context, in *users.Id, opts ...grpc.CallOption) (*AllWarnsFailure, error)
	// Get all bans (inactiv and activ) from Bans by user id
	GetHistoryBan(ctx context.Context, in *users.Id, opts ...grpc.CallOption) (*AllBansFailure, error)
	// Make all warns for this user inactive, insert active ban in table Bans, query to servise users for update role -> banned
	Ban(ctx context.Context, in *BanCreate, opts ...grpc.CallOption) (*BanFailure, error)
	// Make all bans for this user inactive
	Unban(ctx context.Context, in *users.Id, opts ...grpc.CallOption) (*common.Response, error)
}

type warnsClient struct {
	cc grpc.ClientConnInterface
}

func NewWarnsClient(cc grpc.ClientConnInterface) WarnsClient {
	return &warnsClient{cc}
}

func (c *warnsClient) Warn(ctx context.Context, in *WarnCreate, opts ...grpc.CallOption) (*WarnFailure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WarnFailure)
	err := c.cc.Invoke(ctx, Warns_Warn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warnsClient) UnWarn(ctx context.Context, in *users.Id, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, Warns_UnWarn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warnsClient) GetHistoryWarns(ctx context.Context, in *users.Id, opts ...grpc.CallOption) (*AllWarnsFailure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllWarnsFailure)
	err := c.cc.Invoke(ctx, Warns_GetHistoryWarns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warnsClient) GetHistoryBan(ctx context.Context, in *users.Id, opts ...grpc.CallOption) (*AllBansFailure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllBansFailure)
	err := c.cc.Invoke(ctx, Warns_GetHistoryBan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warnsClient) Ban(ctx context.Context, in *BanCreate, opts ...grpc.CallOption) (*BanFailure, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BanFailure)
	err := c.cc.Invoke(ctx, Warns_Ban_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warnsClient) Unban(ctx context.Context, in *users.Id, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, Warns_Unban_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarnsServer is the server API for Warns service.
// All implementations must embed UnimplementedWarnsServer
// for forward compatibility.
type WarnsServer interface {
	// Insert active warn in table Warns
	Warn(context.Context, *WarnCreate) (*WarnFailure, error)
	// Make all warns for this user inactive
	UnWarn(context.Context, *users.Id) (*common.Response, error)
	// Get all warns (inactiv and activ) from Warns by user id
	GetHistoryWarns(context.Context, *users.Id) (*AllWarnsFailure, error)
	// Get all bans (inactiv and activ) from Bans by user id
	GetHistoryBan(context.Context, *users.Id) (*AllBansFailure, error)
	// Make all warns for this user inactive, insert active ban in table Bans, query to servise users for update role -> banned
	Ban(context.Context, *BanCreate) (*BanFailure, error)
	// Make all bans for this user inactive
	Unban(context.Context, *users.Id) (*common.Response, error)
	mustEmbedUnimplementedWarnsServer()
}

// UnimplementedWarnsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWarnsServer struct{}

func (UnimplementedWarnsServer) Warn(context.Context, *WarnCreate) (*WarnFailure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Warn not implemented")
}
func (UnimplementedWarnsServer) UnWarn(context.Context, *users.Id) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnWarn not implemented")
}
func (UnimplementedWarnsServer) GetHistoryWarns(context.Context, *users.Id) (*AllWarnsFailure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryWarns not implemented")
}
func (UnimplementedWarnsServer) GetHistoryBan(context.Context, *users.Id) (*AllBansFailure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryBan not implemented")
}
func (UnimplementedWarnsServer) Ban(context.Context, *BanCreate) (*BanFailure, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ban not implemented")
}
func (UnimplementedWarnsServer) Unban(context.Context, *users.Id) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unban not implemented")
}
func (UnimplementedWarnsServer) mustEmbedUnimplementedWarnsServer() {}
func (UnimplementedWarnsServer) testEmbeddedByValue()               {}

// UnsafeWarnsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarnsServer will
// result in compilation errors.
type UnsafeWarnsServer interface {
	mustEmbedUnimplementedWarnsServer()
}

func RegisterWarnsServer(s grpc.ServiceRegistrar, srv WarnsServer) {
	// If the following call pancis, it indicates UnimplementedWarnsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Warns_ServiceDesc, srv)
}

func _Warns_Warn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarnCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarnsServer).Warn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warns_Warn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarnsServer).Warn(ctx, req.(*WarnCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warns_UnWarn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(users.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarnsServer).UnWarn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warns_UnWarn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarnsServer).UnWarn(ctx, req.(*users.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warns_GetHistoryWarns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(users.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarnsServer).GetHistoryWarns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warns_GetHistoryWarns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarnsServer).GetHistoryWarns(ctx, req.(*users.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warns_GetHistoryBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(users.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarnsServer).GetHistoryBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warns_GetHistoryBan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarnsServer).GetHistoryBan(ctx, req.(*users.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warns_Ban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarnsServer).Ban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warns_Ban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarnsServer).Ban(ctx, req.(*BanCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warns_Unban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(users.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarnsServer).Unban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Warns_Unban_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarnsServer).Unban(ctx, req.(*users.Id))
	}
	return interceptor(ctx, in, info, handler)
}

// Warns_ServiceDesc is the grpc.ServiceDesc for Warns service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Warns_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warns.Warns",
	HandlerType: (*WarnsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Warn",
			Handler:    _Warns_Warn_Handler,
		},
		{
			MethodName: "UnWarn",
			Handler:    _Warns_UnWarn_Handler,
		},
		{
			MethodName: "GetHistoryWarns",
			Handler:    _Warns_GetHistoryWarns_Handler,
		},
		{
			MethodName: "GetHistoryBan",
			Handler:    _Warns_GetHistoryBan_Handler,
		},
		{
			MethodName: "Ban",
			Handler:    _Warns_Ban_Handler,
		},
		{
			MethodName: "Unban",
			Handler:    _Warns_Unban_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warns/service.proto",
}
