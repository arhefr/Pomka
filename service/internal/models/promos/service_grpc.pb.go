// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: promos/service.proto

package promos

import (
	common "promos/internal/models/common"
	users "promos/internal/models/users"
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Promos_Create_FullMethodName = "/promocodes.Promos/Create"
	Promos_Delete_FullMethodName = "/promocodes.Promos/Delete"
	Promos_Use_FullMethodName    = "/promocodes.Promos/Use"
)

// PromosClient is the client API for Promos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PromosClient interface {
	Create(ctx context.Context, in *CreatePromoIn, opts ...grpc.CallOption) (*CreatePromoOut, error)
	Delete(ctx context.Context, in *PromoName, opts ...grpc.CallOption) (*common.Response, error)
	Use(ctx context.Context, in *PromoName, opts ...grpc.CallOption) (*users.TransactionResponse, error)
}

type promosClient struct {
	cc grpc.ClientConnInterface
}

func NewPromosClient(cc grpc.ClientConnInterface) PromosClient {
	return &promosClient{cc}
}

func (c *promosClient) Create(ctx context.Context, in *CreatePromoIn, opts ...grpc.CallOption) (*CreatePromoOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePromoOut)
	err := c.cc.Invoke(ctx, Promos_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promosClient) Delete(ctx context.Context, in *PromoName, opts ...grpc.CallOption) (*common.Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Response)
	err := c.cc.Invoke(ctx, Promos_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *promosClient) Use(ctx context.Context, in *PromoName, opts ...grpc.CallOption) (*users.TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(users.TransactionResponse)
	err := c.cc.Invoke(ctx, Promos_Use_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PromosServer is the server API for Promos service.
// All implementations must embed UnimplementedPromosServer
// for forward compatibility.
type PromosServer interface {
	Create(context.Context, *CreatePromoIn) (*CreatePromoOut, error)
	Delete(context.Context, *PromoName) (*common.Response, error)
	Use(context.Context, *PromoName) (*users.TransactionResponse, error)
	mustEmbedUnimplementedPromosServer()
}

// UnimplementedPromosServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPromosServer struct{}

func (UnimplementedPromosServer) Create(context.Context, *CreatePromoIn) (*CreatePromoOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPromosServer) Delete(context.Context, *PromoName) (*common.Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPromosServer) Use(context.Context, *PromoName) (*users.TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Use not implemented")
}
func (UnimplementedPromosServer) mustEmbedUnimplementedPromosServer() {}
func (UnimplementedPromosServer) testEmbeddedByValue()                {}

// UnsafePromosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PromosServer will
// result in compilation errors.
type UnsafePromosServer interface {
	mustEmbedUnimplementedPromosServer()
}

func RegisterPromosServer(s grpc.ServiceRegistrar, srv PromosServer) {
	// If the following call pancis, it indicates UnimplementedPromosServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Promos_ServiceDesc, srv)
}

func _Promos_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePromoIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromosServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Promos_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromosServer).Create(ctx, req.(*CreatePromoIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promos_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromosServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Promos_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromosServer).Delete(ctx, req.(*PromoName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Promos_Use_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PromosServer).Use(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Promos_Use_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PromosServer).Use(ctx, req.(*PromoName))
	}
	return interceptor(ctx, in, info, handler)
}

// Promos_ServiceDesc is the grpc.ServiceDesc for Promos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Promos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "promocodes.Promos",
	HandlerType: (*PromosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Promos_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Promos_Delete_Handler,
		},
		{
			MethodName: "Use",
			Handler:    _Promos_Use_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "promos/service.proto",
}
